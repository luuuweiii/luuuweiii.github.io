<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Luuuweiii Blog</title>
    <link>https://luuuweiii.github.io/post/</link>
    <description>Recent content in Posts on Luuuweiii Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Sep 2023 16:50:55 +0800</lastBuildDate><atom:link href="https://luuuweiii.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go HTTP框架原理从零开始到还不错</title>
      <link>https://luuuweiii.github.io/post/blog_test/</link>
      <pubDate>Fri, 15 Sep 2023 16:50:55 +0800</pubDate>
      
      <guid>https://luuuweiii.github.io/post/blog_test/</guid>
      <description>Go 原生HTTP框架解读 HTTP（Hypertext Transfer Protocol）框架作为网络编程的重要工具是众多初学者第一次接触的网络框架，同时Go语言也做了十分优秀的原生支持使得在不引入第三方库的情况下可以用简单的几行代码完成服务端与客户端的搭建工作。在学习过程中，我会非常好奇这些简单命令背后发生的事情，但是深入钻研源码又是一件十分痛苦的事情。
因此本文系统通过宏观地介绍HTTP框架工作原理，同时辅以必要的源码，一来可以一定程度加深对于网络实现原理的理解，二来阅读官方的代码一定是培养编程习惯养成编程风格最好的途径。
文章描写较为基础且啰嗦，基于我的书写风格也基于我较低的水平欢迎指正和讨论。 宏观理解 HTTP遵循经典的C-S架构，即服务端(Serve)和客户端(Client)之间通过发起请求与回复进行通信。当然也可以是BS架构，这个在之后讨论。那么我们便可以将服务端和客户端分开来讨论和理解。最后会以思维导图的形式更加清晰地展示这个过程。
1 服务端: 服务端通常搭建在远程服务器上，我们日常会通过浏览器通过输入网址与服务端进行交互，服务端会返回包含各式各样信息的网页。我们可以将服务端的功能抽象为两步，一是构建服务，二是启动服务。
1.1 构建服务：
Q1：我们会自然地发问需要构建一个什么样子的服务呢？
A1：或许我们可以从日常浏览一个网页形成一个比较具体的理解。比如我们浏览某购物网站，这个网站的首页一定有各种不同的按钮，这些按钮点击后都会产生不同的效果。如果将这些效果抽象为一个个函数Func，那么我们就是要构建一个服务，里面有很多的功能函数并且有其对应的入口，他们构成一一对应的关系。
如下图，我们可以发现不同的按钮点击后对应的网址是不同的。
由此我们可以更抽象地描述这个服务具由很多网址或者说是路径(pattern)和处理函数(handler) 的键值对构成。 我们或许可以想到这么多的键值对应该由一个容器统一存储，并且有一个调度器来统一管理。
Q2：这个容器是什么呢？
A2：前面提到了存放的是键值对，那么可以自然地想到可以用一个map保存pattern-handle的键值对。
这个调度器我们称之为路由处理器，或者是HTTP多路复用器，因为众多不同的HTTP请求都经过它来匹配对应的函数。
Q3：什么是路由呢？
A3：路由是指网络设备通过网络将信息正确传输到指定目的地的方式，简单来说就是对于传入服务端的信息通过一定的方法找到他应该正确去往的地方，在目前这个具体情况里面就是找到地址对应的处理函数。同时路由管理器还会实现前缀匹配等众多功能，也可以自定义特殊的功能，这一部分后面结合具体源码详细描述。
1.2 启动服务：
启动服务换句话来说就是要实现客户端发来的消息服务端可以接受并处理。
因此可以启动服务转化为两个问题：如何接受消息和如何处理消息。
Q4:如何接受消息？
A4：接收消息无非便是用一个For循环不断地监听是否有消息传入，不过此处框架通过被动阻塞的方式防止For循环一直空转长期占用cpu的时间片。同时还使用了一个多路复用的技术，这部分结合代码解释。 Q5：如何处理消息？
A5：结合前面图片的结构，处理消息主要分为两部分的操作，首先通过传来的消息根据pattern找到其对应的handle处理函数。然后需要启动这个处理函数，这样子一个完整的服务端就构建完成了。
2 客户端： 宏观上来看客户端主要是发送请求，这个过程可以抽象为三个子过程：创建请求、获取连接、通过tcp连接进行收发。
2.1 创建请求：
在面向对象的编程思想下，请求应该也是一个对象，所以第一步应该是将对应请求url和body等内容打包成一个请求结构体的实例。
2.2 获取连接：
请求要成功发起需要尝试与服务端建立连接，这里需要注意连接也是一种非常宝贵的资源因此需要尽可能复用而非申请。在这个过程中会有一个tcp连接池，尝试申请连接就是在tcp池中寻找可用连接。
这个过程中会发起判断，如果有可以复用的连接比如目标服务端和内容均相同判则复用连接，如果没有则申请新的连接。
2.3 通过tcp连接进行收发：
建立连接后就可以执行发送请求和接收响应过程，此处会有两个goroutine来负责实现这两个功能并且通过channel进行通信。
以下为客户端和服务端总体宏观流程的思维导图 源码分析 1 服务端 1.1 核心数据结构 以下主要先熟悉客户端部分的主要数据结构，以便下一部分介绍代码逻辑时可以更好理解。
Server:
type Server struct { // 监听地址 Addr string // 请求多路复用器（路由处理器） Handler Handler // handler to invoke, http.</description>
    </item>
    
  </channel>
</rss>
